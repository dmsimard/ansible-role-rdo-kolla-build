---
#   Copyright Red Hat, Inc. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.
#
- include: repositories.yml
  tags:
    - setup
    - build
    - push

- include: docker.yml
  tags:
    - setup
    - build
    - push

- include: kolla.yml
  tags:
    - setup
    - build
    - push

# This block parses the container-images/overcloud_containers.yaml file
# provided by tripleo-common. It is the default if kolla_rdo_images is not set.
# It boils down to
# - Removing the prefix: the namespace and the "centos-binary-"
# - Removing the suffix, for example ":latest"
- block:
    - name: Load supported containers
      slurp:
        src: "{{ tripleo_containers }}"
      register: supported_containers

    - name: Create temporary file for parsed containers
      command: mktemp --suffix=_kolla-build
      register: tmpfile

    - name: Adjust permissions on parsed containers file
      file:
        path: "{{ tmpfile.stdout }}"
        mode: "0755"

    - name: Parse supported containers
      vars:
       containers: "{{ supported_containers.content | b64decode | from_yaml }}"
      template:
        src: parsed_containers.j2
        dest: "{{ tmpfile.stdout }}"

    - name: Load parsed containers
      slurp:
        src: "{{ tmpfile.stdout }}"
      register: parsed_containers

    - debug:
        msg: "{{ parsed_containers.content | b64decode }}"

    # [:-1] to strip the trailing newline (haven't found a better way, sorry)
    - name: Save parsed containers
      vars:
        containers: "{{ parsed_containers.content | b64decode }}"
      set_fact:
        kolla_rdo_images: "{{ containers[:-1].split('\n') }}"
  when: kolla_rdo_images is not defined or not kolla_rdo_images

- name: Record relevant variables with ARA
  ara_record:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
    type: "{{ item.type |default('text') }}"
  with_items:
    - { key: "kolla_version", value: "{{ kolla_version.stdout }}" }
    - { key: "version_hash", value: "{{ version_hash }}" }
    - { key: "trunk_repository", value: "{{ hashed_trunk_repository }}", type: "url" }
    - { key: "trunk_deps_repository", value: "{{ trunk_deps_repository }}", type: "url" }
    - { key: "build_id", value: "{{ build_id }}" }
    - { key: "kolla_rdo_images", value: "{{ kolla_rdo_images }}", type: "list" }
  ignore_errors: "yes"
  tags:
    - setup
    - build
    - push

- name: Login to Docker registry
  docker_login:
    registry_url: "{{ kolla_registry }}"
    username: "{{ kolla_registry_username }}"
    password: "{{ kolla_registry_password }}"
    email: "{{ kolla_registry_email | default(omit, true) }}"
    reauthorize: "yes"
  no_log: "yes"
  tags:
    - push
  when:
    - kolla_registry is defined and kolla_registry
    - kolla_registry_username is defined and kolla_registry_username
    - kolla_registry_password is defined and kolla_registry_password
    - kolla_push

# The with_items inline jinja provides the ability to use either a list format
# or a comma-separated list of values interchangeably.
- name: Build images
  vars:
    image: "{{ item }}"
  include: build.yml
  static: no
  with_items: >
    {%- if kolla_rdo_images is iterable and kolla_rdo_images is not string %}
    {{- kolla_rdo_images -}}
    {%- else %}
    {{- kolla_rdo_images.split(',') -}}
    {%- endif %}
  when: kolla_build | bool
  tags:
    - build

- block:
    # This is a bit weird due to the docker images format syntax clashing with jinja
    # https://docs.docker.com/engine/reference/commandline/images/#/formatting
    - name: Retrieve list of built images
      shell: >
        docker images --format "{{ '{{' }}.Repository{{ '}}' }}" \
          --filter "label=build_id={{ build_id }}"
      register: built_images
      tags:
        - push

    - name: Tag images with version and push
      vars:
        image: "{{ item }}"
      include: push.yml
      static: no
      with_items: "{{ built_images.stdout_lines }}"
      tags:
        - push
  when: kolla_push
